/*
 * Copyright (C) 1995-2008 University of Karlsruhe.  All right reserved.
 *
 * This file is part of libFirm.
 *
 * This file may be distributed and/or modified under the terms of the
 * GNU General Public License version 2 as published by the Free Software
 * Foundation and appearing in the file LICENSE.GPL included in the
 * packaging of this file.
 *
 * Licensees holding valid libFirm Professional Edition licenses may use
 * this file in accordance with the libFirm Commercial License.
 * Agreement provided with the Software.
 *
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE.
 */

/**
 * @file
 * @brief     Definitions for optimisation flags
 * @author    Michael Beck, Sebastian Hack
 * @version   $Id$
 */

/*
 * We have 3 kinds of flags:
 * I_FLAGS are INTERNAL flags: There is only a public set_opt_<flag> function
 * E_FLAGS are EXTERNAL flags: Public get_opt_<flag> and set_opt_<flag> fucntions exists
 * R_FLAGS are RUNNING flags: Use only internally in libfirm to indicate running states
 */

/** Turn off all optimizations. */
I_FLAG(optimize                           , 0, ON)

/** Common subexpression eliminations: Hash the nodes. */
E_FLAG(cse                                , 1, ON)

/** Don't use block predecessor for comparison.
 *  Default must be zero as code placement must
 *  be run right after a local optimize walk with
 *  global_cse on. */
I_FLAG(global_cse                         , 2, OFF)

/** Evaluate operations. */
I_FLAG(constant_folding                   , 3, ON)

/** Bad node propagation. */
I_FLAG(unreachable_code                   , 4, ON)

/** */
I_FLAG(control_flow_straightening         , 5, ON)

/** */
I_FLAG(control_flow_weak_simplification   , 6, ON)

/** */
I_FLAG(control_flow_strong_simplification , 7, ON)

/** Algebraic simplifications. */
I_FLAG(algebraic_simplification           , 8, ON)

/** Use Global Null Pointer Test elimination. */
I_FLAG(global_null_ptr_elimination        , 10, ON)

/** Remove dynamic method dispatch. */
E_FLAG(dyn_meth_dispatch                  , 11, ON)

/** Transformations that normalize the firm representation
 *  as removing Ids and Tuples, useless Phis, SymConst(id) -> Const(entity) ...
 */
I_FLAG(normalize                          , 12, ON)

I_FLAG(allow_conv_b                       , 13, ON)

/** precise exception context */
I_FLAG(precise_exc_context                , 15, OFF)

/** Optimize cast nodes. */
E_FLAG(suppress_downcast_optimization     , 22, OFF)

/** Not really an optimization, removes Confirm nodes. */
I_FLAG(remove_confirm                     , 23, OFF)

/** Load and Store have only Null exceptions. */
I_FLAG(ldst_only_null_ptr_exceptions      , 25, ON)

/** Sel-based Null-pointer check elimination. */
I_FLAG(sel_based_null_check_elim          , 26, OFF)

/** Automatically create Sync node during construction. */
I_FLAG(auto_create_sync                   , 27, OFF)

/** Enable Alias-analysis. */
I_FLAG(alias_analysis                     , 28, ON)

/** Closed world assumption. */
I_FLAG(closed_world                       , 31, OFF)

/* -------------------- RUNNING flags ------------------- */

/** This flag is set while the reassociation optimizations are running */
R_FLAG(reassoc                            , 0)
